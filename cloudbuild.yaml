# cloudbuild.yaml

# Substitutions adalah variabel yang akan diisi oleh Cloud Build saat eksekusi.
# Gunakan ini untuk nilai-nilai yang akan disuplai ke Cloud Run sebagai variabel lingkungan.
substitutions:
  # Path ke file .env di Google Cloud Storage (jika kamu masih menyimpannya di sana).
  # Ini hanya untuk langkah 'gsutil cp' jika kamu ingin menyalinnya ke lingkungan build,
  # TAPI variabel lingkungan untuk Cloud Run akan diset secara eksplisit di `--set-env-vars`.
  _ENV_GCS_PATH: gs://h-05-450908.appspot.com/sipalingfilm/.env

  # ---------- VARIABEL LINGKUNGAN YANG AKAN DISUPLAI KE CLOUD RUN ----------
  # PASTIKAN NILAI-NILAI INI SESUAI DENGAN KREDENSIAL ASLI KAMU!
  # Ini adalah variabel yang akan diakses oleh `process.env` di aplikasi Node.js kamu di Cloud Run.
  #_PORT: "8080" # Port yang didengarkan aplikasi Node.js kamu
  _DB_NAME: "sipalingfilm"
  _DB_USER: "punyacantik123"
  _DB_PASSWORD: "cantik123" # Peringatan: Password ini akan terlihat di log build Cloud Build!
  _DB_HOST: "34.128.95.54"  # IP publik server MySQL kamu
  _JWT_SECRET: "your_super_secret_jwt_key_here_ganti_ini" # Ganti dengan secret JWT kamu (Sangat Sensitif!)
  _JWT_EXPIRES_IN: "1h" # Waktu kadaluarsa JWT


# Steps mendefinisikan langkah-langkah yang akan dijalankan Cloud Build secara berurutan.
steps:
  # Step 1: Ambil file .env dari Google Cloud Storage
  # Tujuan dari langkah ini adalah untuk memastikan file .env tersedia di lingkungan build
  # jika ada kebutuhan spesifik selama proses build (misalnya, jika Dockerfile membutuhkannya).
  # Namun, untuk variabel lingkungan di Cloud Run saat runtime, kita menggunakan `--set-env-vars`.
  - name: "gcr.io/cloud-builders/gsutil"
    args: ["cp", "${_ENV_GCS_PATH}", ".env"]

  # Step 2: (Opsional) Cek isi file .env yang sudah disalin
  # Ini sangat berguna untuk debugging. Kamu bisa melihat apa yang sebenarnya disalin.
  # Hapus step ini setelah kamu yakin konfigurasinya benar.
  - name: 'ubuntu'
    entrypoint: 'bash'
    args: ['-c', 'cat .env']

  # Step 3: Build Docker Image dari kode backend
  # Menggunakan "gcr.io/cloud-builders/docker" builder.
  # "." pada argumen `build` berarti konteks build adalah direktori saat ini (root repositori).
  # `-t` untuk memberikan tag pada image yang akan di-push ke Container Registry.
  - name: "gcr.io/cloud-builders/docker"
    # 'dir: "."' secara eksplisit menentukan direktori kerja (root),
    # bisa juga dihilangkan jika sudah default ke root.
    dir: "." 
    args: ["build", "-t", "gcr.io/$PROJECT_ID/sipalingfilm", "."]

  # Step 4: Push Docker Image yang sudah dibangun ke Google Container Registry
  # Image ini kemudian akan digunakan oleh Cloud Run.
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/sipalingfilm"]

  # Step 5: Deploy ke Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "run", "deploy", "sipalingfilm",
        "--image", "gcr.io/$PROJECT_ID/sipalingfilm",
        "--timeout", "1000s",
        "--region", "us-central1",
        "--allow-unauthenticated",
    
        
        # ---------- PERBAIKAN UTAMA DI SINI ----------
        # SELURUH STRING UNTUK --set-env-vars DITULIS DALAM SATU BARIS
        "--set-env-vars", 
        "DB_NAME=${_DB_NAME},DB_USER=${_DB_USER},DB_PASSWORD=${_DB_PASSWORD},DB_HOST=${_DB_HOST},JWT_SECRET=${_JWT_SECRET},JWT_EXPIRES_IN=${_JWT_EXPIRES_IN}"
        # ----------------------------------------------
      ]

# Opsi konfigurasi tambahan untuk Cloud Build.
options:
  logging: CLOUD_LOGGING_ONLY # Hanya log yang terkait dengan build itu sendiri, bukan log aplikasi container.

# Timeout total untuk seluruh proses build (misalnya 1600s = 26 menit 40 detik).
timeout: "1600s"