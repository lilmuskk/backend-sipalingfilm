# cloudbuild.yaml

# Substitutions adalah variabel yang bisa kamu ganti saat build.
# Gunakan ini untuk menyimpan nilai-nilai yang mungkin berubah atau untuk kredensial
# yang akan disuplai ke Cloud Run.
substitutions:
  # Path ke file .env di Google Cloud Storage (jika kamu masih menyimpannya di sana)
  # Ini hanya untuk mengambil file .env selama proses build jika diperlukan,
  # TAPI variabel lingkungan untuk Cloud Run akan diset secara eksplisit di `--set-env-vars`.
  _ENV_GCS_PATH: gs://h-05-450908.appspot.com/sipalingfilm/.env

  # ---------- VARIABEL LINGKUNGAN UNTUK CLOUD RUN ----------
  # PASTIKAN NILAI-NILAI INI SESUAI DENGAN KREDENSIAL ASLI KAMU!
  # Ini akan disuplai ke aplikasi di Cloud Run saat runtime.
  _PORT: "8080" # Port yang didengarkan aplikasi Node.js kamu
  _DB_NAME: "sipalingfilm"
  _DB_USER: "punyacantik123"
  _DB_PASSWORD: "cantik123" # HATI-HATI: Ini akan terlihat di log build Cloud Build!
  _DB_HOST: "34.128.95.54"  # IP publik server MySQL kamu
  _JWT_SECRET: "your_super_secret_jwt_key_here_ganti_ini" # Ganti dengan secret JWT kamu (Sangat Sensitif!)
  _JWT_EXPIRES_IN: "1h"

# Steps mendefinisikan langkah-langkah yang akan dijalankan Cloud Build.
steps:
  # Step 1: Ambil file .env dari Google Cloud Storage
  # (Ini akan menyalin file .env ke lingkungan build.
  #  Namun, variabel di Cloud Run akan diset dari substitutions di atas.)
  - name: "gcr.io/cloud-builders/gsutil"
    args: ["cp", "${_ENV_GCS_PATH}", ".env"]

  # Step 2: (Opsional) Cek isi file .env yang sudah disalin (untuk debugging)
  # Hapus step ini setelah kamu yakin konfigurasinya benar.
  - name: 'ubuntu'
    entrypoint: 'bash'
    args: ['-c', 'cat .env']

  # Step 3: Build Docker Image dari kode backend
  # Menggunakan "." sebagai context karena Dockerfile dan kode ada di root repositori.
  - name: "gcr.io/cloud-builders/docker"
    # dir: "." # Opsional: jika Dockerfile ada di root, bisa dihilangkan atau pakai "."
    args: ["build", "-t", "gcr.io/$PROJECT_ID/sipalingfilm", "."]

  # Step 4: Push Docker Image yang sudah dibangun ke Google Container Registry
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/$PROJECT_ID/sipalingfilm"]

  # Step 5: Deploy Docker Image ke Google Cloud Run
  # Ini adalah langkah yang akan membuat service Cloud Run dan menyuplai variabel lingkungan.
  - name: "gcr.io/cloud-builders/gcloud"
    args:
      [
        "run", "deploy", "sipalingfilm", # Nama service Cloud Run Anda
        "--image", "gcr.io/$PROJECT_ID/sipalingfilm", # Image yang akan di-deploy
        "--timeout", "1000s", # Timeout untuk request (sesuaikan jika perlu)
        "--region", "us-central1", # Region Cloud Run Anda (pastikan sama dengan DB jika Cloud SQL)
        "--allow-unauthenticated", # Izinkan akses tanpa autentikasi (sesuaikan jika perlu)

        # ---------- MENYUPLAI VARIABEL LINGKUNGAN KE CLOUD RUN CONTAINER ----------
        # Cloud Run akan menggunakan variabel-variabel ini saat menjalankan aplikasi Anda.
        # Ini adalah solusi untuk error "Access denied" dan "container failed to start".
        "--set-env-vars",
        "PORT=${_PORT},"
        "DB_NAME=${_DB_NAME},"
        "DB_USER=${_DB_USER},"
        "DB_PASSWORD=${_DB_PASSWORD}," # Peringatan: Password sensitif di log build!
        "DB_HOST=${_DB_HOST},"
        "JWT_SECRET=${_JWT_SECRET}," # Peringatan: Secret sensitif di log build!
        "JWT_EXPIRES_IN=${_JWT_EXPIRES_IN}",

        # ---------- PENTING: JANGAN AKTIFKAN INI JIKA TIDAK MENGGUNAKAN CLOUD SQL ----------
        # "--add-cloudsql-instances", "projects/YOUR_PROJECT_ID/regions/YOUR_SQL_REGION/instances/YOUR_SQL_INSTANCE_NAME"
      ]

# Opsi konfigurasi tambahan untuk Cloud Build.
options:
  logging: CLOUD_LOGGING_ONLY # Hanya log yang terkait dengan build itu sendiri.

# Timeout total untuk seluruh proses build.
timeout: "1600s" # 1600 detik = 26 menit 40 detik. Cukup untuk build Node.js.